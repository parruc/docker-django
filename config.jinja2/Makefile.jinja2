node:
	cd project/{{ projectname }}/layout; npm install

projectfolder:
	rm -Rf project
	mkdir -p project/{{ projectname }}
	cd project/{{ projectname }}; git clone {{ gitrepository }} .
	cd project/{{ projectname }}; git checkout {{ gitbranch }}
	sudo chown -R `id -un` .

install: down projectfolder node up update

up:
	docker-compose up -d --scale wsgi={{ scale }}
	{% if spooler %}
	mkdir -p project/{{ projectname }}/{{ projectname }}/spooler
	{% endif %}
	{% if not development %}
	{% if spooler %}
	chown www-data:www-data project/{{ projectname }}/{{ projectname }}/spooler
	{% endif %}
	chown www-data:www-data www -R
	{% endif %}

down:
	docker-compose down

recreate: down up

restart:
	docker-compose restart

reload:
	touch project/{{ projectname }}/{{ projectname }}/settings.py

clearcache:
	docker-compose exec redis redis-cli -n 1 FLUSHDB

chown:
	chown www-data:www-data {{ projectpath }}/www -R

migrations:
	docker-compose exec wsgi python manage.py makemigrations

migrate:
	docker-compose exec wsgi python manage.py migrate

messages:
	{% if  development %}
	docker-compose exec wsgi python manage.py  makeallmessages -a -i node_modules
	{% endif %}
	docker-compose exec wsgi python manage.py compilemessages

{% if  development %}
theme: node
	cd project/{{ projectname }}/layout; npm run dev
	docker-compose exec wsgi python manage.py collectstatic --noinput -l -i */report.html
	cd project/{{ projectname }}/layout; npm run watch

fixtures:
	docker-compose exec wsgi python manage.py loaddata initial_data

update: pull migrate fixtures messages theme 
{% else %}
theme: node
	cd project/{{ projectname }}/layout; npm run build
	docker-compose exec wsgi python manage.py collectstatic --noinput

fixtures:
	echo "Skipping fixtures in production"

update: pull migrate fixtures messages theme chown clearcache restart 
{% endif %}

pull:
	cd project/{{ projectname }}; git pull

update: pull migrate fixtures messages theme reload clearcache

logs:
	docker-compose logs -f --timestamp --tail=100

superuser:
	docker-compose exec wsgi python manage.py createsuperuser
