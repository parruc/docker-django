node:
	docker-compose run --rm --name {{projectname}}_theme_1 -w /project/{{ projectname}}/layout spooler npm install

projectfolder:
	rm -Rf project
	mkdir -p project/{{ projectname }}
	cd project/{{ projectname }}; git clone {{ gitrepository }} .
	branchexists=$(git branch --list {{ gitbranch }})
	@if [ -z "$$branchexists" ] ; \
	then \
        echo "Branch {{ gitbranch }} exists, checking it out"; \
	cd project/{{ projectname }}; git checkout {{ gitbranch }} ; \
	else \
        echo "Branch {{ gitbranch }} does not exists, creating it"; \
	cd project/{{ projectname }}; git branch {{ gitbranch }} ; \
	cd project/{{ projectname }}; mv wishtobethere {{ projectname }} ; \
	cd project/{{ projectname }}; mv .git .. ; \
	cd project/{{ projectname }}; grep -rl wishtobethere . | xargs sed -i 's/wishtobethere/{{ projectname }}/g' ; \
	cd project/{{ projectname }}; mv ../.git . ; \
        fi
	{% if spooler %}
	mkdir -p project/{{ projectname }}/{{ projectname }}/spooler
	{% endif %}

install: down projectfolder node up update

scale:
	docker-compose up -d --scale wsgi={{ scale }}

build:
	docker-compose build wsgi{% if async %} asgi{% endif %}

up: scale chown

down:
	docker-compose down

recreate: down up

rebuild: down chown build up

restart:
	docker-compose restart

reload:
	touch project/{{ projectname }}/{{ projectname }}/settings.py

clearcache:
	docker-compose exec redis redis-cli -n 1 FLUSHDB

chown:
	{% if development %}
	sudo chown -R `id -un` .
	{% else %}
	chown www-data:www-data www -R
	{% if spooler %}
	chown www-data:www-data project/{{ projectname }}/{{ projectname }}/spooler
	{% endif %}
	{% endif %}

migrations:
	docker-compose exec wsgi python manage.py makemigrations

migrate:
	docker-compose exec wsgi python manage.py migrate

messages:
	{% if  development %}
	docker-compose exec wsgi python manage.py  makeallmessages -a -i node_modules
	{% endif %}
	docker-compose exec wsgi python manage.py compilemessages

{% if  development %}
theme: node
	docker-compose run --rm --name {{projectname}}_theme_1 -w /project/{{ projectname}} spooler uwsgi --ini ../uwsgi.ini --py manage.py --pyargv="compilethemes --command=dev --domain={{ hostname[1:] }} -v 3"
	docker-compose run --rm --name {{projectname}}_theme_1 -w /project/{{ projectname}} spooler uwsgi --ini ../uwsgi.ini --py manage.py --pyargv="compilethemes --command=watch --domain={{ hostname[1:] }} -v 3"

fixtures:
	docker-compose exec wsgi python manage.py loaddata initial_data

update: pull migrate fixtures messages theme
{% else %}
theme: node
	docker-compose run --rm --name {{projectname}}_theme_1 -w /project/{{ projectname}} spooler uwsgi --ini ../uwsgi.ini --py manage.py --pyargv="compilethemes --command=build -v 3"

fixtures:
	echo "Skipping fixtures in production"

update: pull migrate fixtures messages theme chown clearcache reload
{% endif %}

pull:
	cd project/{{ projectname }}; git pull

logs:
	docker-compose logs -f --timestamp --tail=100

superuser:
	docker-compose exec wsgi python manage.py createsuperuser
